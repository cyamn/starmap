// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  otp           OTP?
  accounts      Account[]
  sessions      Session[]
  projects      Sheet[]
}

model OTP {
  id      String   @id @default(cuid())
  otp     String
  expires DateTime
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Sheet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @default("Cheat Sheet")
  pages     Page[]
  ownerId   String?
  owner     User?    @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@map("Project")
}

model Page {
  id        String   @id @default(cuid())
  index     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @default("Page")
  blocks    Block[]
  sheetId   String
  sheet     Sheet    @relation(fields: [sheetId], references: [id], onDelete: Cascade)

  @@index([sheetId])
  @@map("Page")
}

model Block {
  id            String         @id @default(cuid())
  index         Float          @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  type          BlockType
  title         String
  markdown      String
  pageId        String
  page          Page           @relation(fields: [pageId], references: [id], onDelete: Cascade)
  outgoingLinks Link[]         @relation("startBlock")
  incomingLinks Link[]         @relation("endBlock")
  questionCards QuestionCard[]

  @@index([pageId])
  @@map("Block")
}

model QuestionCard {
  id       String @id @default(cuid())
  question String
  answer   String
  blockId  String
  block    Block  @relation(fields: [blockId], references: [id], onDelete: Cascade)
}

model Link {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  // updatedAt    DateTime @updatedAt
  value      Float
  source     String   @map("source")
  target     String   @map("target")
  startBlock Block    @relation(name: "startBlock", fields: [source], references: [id], onDelete: Cascade)
  endBlock   Block    @relation(name: "endBlock", fields: [target], references: [id], onDelete: Cascade)

  @@index([source])
  @@index([target])
  @@map("Link")
}

enum BlockType {
  DEFAULT
  HINT
  INFO
  WARNING
  ERROR
}
